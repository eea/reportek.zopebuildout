===============================================
Zope buildout for https://bdr.eionet.europa.eu/
===============================================

.. contents ::

This buildout will create an isolated environment for running BDR Reportek.
There are three configurations available for running this buildout::

 1. production (production)
 2. testing (staging)
 3. testing dev (staging_dev)
 4. development (devel)


Project name
------------
The project name is BDR: Business Data Repository and it's based on Zope framework.


Prerequisites - System packages
-------------------------------
These should be installed by the sysadmin (needs root)
This buildout was tested on RHEL linux distribution (CentOS 6.5 and 7)
We will need pip to install some python related packages for versions greater
than the python shipped with RHEL 6.5. We will also need additional repos: PUIAS, or
you can use the python 2.7 from software collections here: https://www.softwarecollections.org/en/scls/rhscl/python27/


====================   =============================
CentOS                 dependency for
====================   =============================
apr-util-devel         buildout
cronie                 buildout
curl-devel             buildout
cyrus-sasl-devel       OpenLDAP
gcc                    buildout
gcc-c++                buildout
gdal-libs              reportek-converters
git > 1.8.3            buildout
glibc-devel            buildout
graphviz-devel         reportek-converters
ImageMagick > 6.3.7+   reportek-converters
java-1.6.0-openjdk     reportek-converters
libgsasl-devel         reportek-converters
libjpeg-turbo-devel    Pillow
libxml2-devel          buildout
libxslt-devel          buildout
lynx                   buildout
make                   buildout
mdbtools               reportek-converters
munin-node             buildout
openldap-devel         OpenLDAP
openssl-devel          buildout
p7zip                  reportek-converters
patch                  buildout
perl-XML-SAX           buildout
poppler-utils          reportek-converters
python 2.7             buildout
python-devel           buildout
python-pip             buildout
python-virtualenv      buildout
readline-devel         buildout
subversion-devel       buildout
tar                    buildout
unrar                  reportek-converters
unzip                  reportek-converters
wget                   buildout
wv                     http://wvware.sourceforge.net
xlhtml                 reportek-converters
====================   =============================


Additional info to install git for CentOS::

$ wget http://puias.math.ias.edu/data/puias/computational/6/x86_64/git-1.8.3.1-1.sdl6.x86_64.rpm
$ wget http://puias.math.ias.edu/data/puias/computational/6/i386/perl-Git-1.8.3.1-1.sdl6.noarch.rpm
$ yum update  git-1.8.3.1-1.sdl6.x86_64.rpm perl-Git-1.8.3.1-1.sdl6.noarch.rpm

Make sure crond (from cronie package) starts automatically on RHEL systems.

Notes regarding using Reportek buildout with python2.7 as a Software Collection
-------------------------------------------------------------------------------

The buildout can be used with python2.7 installed as a Software Collection, but we need to enable the python27 collection
prior to setting up the buildout or trying to manually start/stop the instances generated by the buildout. Enabling the
python27 software collection can easily be done by issuing the following command::

$ scl enable python27 bash

After this, all other commands/operations are the same as those for system python 2.7. The init script has been adapted to work seamlessly with either system python2.7 and Software Collection python2.7, without any additional step required.

More informations about Software Collection can be found at `https://www.softwarecollections.org/en/`_.

Product directory
~~~~~~~~~~~~~~~~~
::

  $ mkdir -p /var/local/bdr/production


Internal dependencies
---------------------
This buildout depends on us having the following products

 * Products.Reportek https://github.com/eea/Products.Reportek
 * XMLRPCMethod https://svn.eionet.europa.eu/repositories/Zope/trunk/XMLRPCMethod/
 * RDFGrabber https://svn.eionet.europa.eu/repositories/Zope/trunk/RDFGrabber/
 * SmallObligations https://svn.eionet.europa.eu/repositories/Zope/trunk/SmallObligations/
 * reportek-converters https://github.com/eea/reportek-converters


Install Products.Reportek
-------------------------
We shall use virtualenv & co for isolated packages::

  $ cd /var/local/bdr/production
  $ git clone https://github.com/eea/reportek.zopebuildout.git zope
  $ virtualenv prod-venv
  $ . ./prod-venv/bin/activate
  $ pip install -r zope/requirements.txt


Build production
----------------
Note that the production deployment will use Products.Reportek egg from
http://eggshop.eaudeweb.ro/ ::

  $ cd /var/local/bdr/production
  $ . prod-venv/bin/activate
  $ cd zope
  $ curl -L -O http://downloads.buildout.org/2/bootstrap.py
  $ python bootstrap.py
  $ cp secret.cfg.sample secret.cfg
  $ vim secret.cfg

Edit secret.cfg and change all the passwords. This file should not be added to Git because it is secret :).
Run buildout using the production.cfg configuration ::

  $ ./bin/buildout -c production.cfg

For the application stack to be restarted when server reboot, the system administrator should add under /etc/init.d the script from /var/local/bdr/production/etc/rc.d/bdrctl, e.g.::

  $ cd /var/local/bdr/production/etc/rc.d
  $ sudo ln -s `pwd`/bdrctl /etc/init.d/bdrctl
  $ sudo chkconfig --add bdrctl
  $ sudo chkconfig bdrctl on
  $ sudo service bdrctl start

Check the status and see if all the procs started with ::

  $ sudo service bdrctl status

or if you're using CentOS 7, there will be an autogenerated systemd process generated for you automatically and you can check the status with ::

  $ sudo systemctl status bdrctl.service

Restart with ::

  $ sudo service bdrctl restart

or for systemd ::

  $ sudo systemctl restart bdrctl.service

Build staging
-------------
This deployment is what runns behind https://bdr-test.eionet.europa.eu/
Note that staging will use Products.Reportek from sources (through mr.developer)
https://github.com/eea/Products.Reportek ::

  $ mkdir -p /var/local/bdr/staging
  $ cd /var/local/bdr/staging
  $ git clone https://github.com/eea/reportek.zopebuildout.git zope
  $ virtualenv staging-venv
  $ . staging-venv/bin/activate
  $ pip install -r zope/requirements-staging.txt
  $ cd zope
  $ curl -L -O http://downloads.buildout.org/2/bootstrap.py
  $ python bootstrap.py
  $ cp secret.cfg.sample secret.cfg
  $ vim secret.cfg

Edit secret.cfg and change all the passwords.
Run buildout using the staging.cfg configuration::

  $ ./bin/buildout -c staging.cfg

For the application stack to be restarted when server reboot, the system administrator should add under /etc/init.d the script from /var/local/bdr/staging/etc/rc.d/bdr-testctl, e.g.::

  $ cd /var/local/bdr/staging/etc/rc.d
  $ sudo ln -s `pwd`/bdr-testctl /etc/init.d/bdr-testctl
  $ sudo chkconfig --add bdr-testctl
  $ sudo chkconfig bdr-testctl on
  $ sudo service bdr-testctl start

Check the status and see if all the procs started with ::

  $ sudo service bdr-testctl status

or if you're using CentOS 7, there will be an autogenerated systemd process generated for you automatically and you can check the status with ::

  $ sudo systemctl status bdr-testctl.service

Restart with ::

  $ sudo service bdr-testctl restart

or for systemd ::

  $ sudo systemctl restart bdr-testctl.service

Build devel
-------------
Note that devel will use Products.Reportek from sources (through mr.developer)
https://github.com/eea/Products.Reportek but has always-checkout = false so 
that you can control the version of your sources::

  $ mkdir -p /var/local/bdr/devel
  $ cd /var/local/bdr/devel
  $ git clone git clone https://github.com/eea/reportek.zopebuildout.git zope
  $ virtualenv devel-venv
  $ . devel-venv/bin/activate
  $ pip install -r zope/requirements-dev.txt
  $ cd zope
  $ curl -L -O http://downloads.buildout.org/2/bootstrap.py
  $ python bootstrap.py
  $ cp secret.cfg.sample secret.cfg
  $ vim secret.cfg

Edit secret.cfg and change all the passwords.
Run buildout using the devel.cfg configuration::

  $ ./bin/buildout -c devel.cfg
  $ ./bin/instance fg

Find out what dir the reportek.converters egg is intalled to and start gunicorn::
  * $ cd eggs/reportek.converters-<ver>.egg/Products/reportek.converters/ && ../../../../zope/bin/gunicorn -b localhost:5002 web:app


=================
Translation files
=================
You will need to update translations from time to time as new i18n:translate tags
are added to the project. There are 2 places translation tags are picked from:

 * the zpt files found in the Product source files
 * the ZODB (either DTMLs or Page Templates)


Updating translations
---------------------

Updating po files will assume that you have acces to the Products.Reportek source
So will we do this from staging. If for any reason there are translation tags in
the production ZODB that are not in the bdr-test then you need to find a way
to import them in the bdr-test ZODB.

In order to regenerare translation files got to buzzardNT and::

  $ sudo su - zope
  $ cd /var/local/bdr/staging/zope
  $ ./bin/supervisorctl stop instance
  $ cd src/Products.Reportek/extras
  $ /var/local/bdr/staging/zope/bin/instance debug
  >>> import zodb_scripts
  >>> zodb_scripts.dump_code(app)
  >>> CTRL+d
  $ /var/local/bdr/staging/zope/bin/supervisorctl start instance
  $ cd /var/local/bdr/staging/zope/src/Products.Reportek/Products/Reportek/locales
  $ ./update.sh [path/to/i18ndude - default buzzardNT staging deployment bin dir]
  - commit changes

Update translations - alternative
---------------------------------
This is done on the developer's machine.

 * Get backups from production
 * put them on dev machine on an instalation of bdr
 * use staging or development deployment to have the sources, checkout at a specific date in order to match the egg on production if required
 * follow the steps above with the fs paths of your machine.

Note that you will probably not be able to login not having a local ldap of your own, but that is not required


Generate xliff files
--------------------
::

  $ sudo su - zope
  $ cd /var/local/bdr/staging/zope/src/
  $ ./Products.Reportek/Products/Reportek/locales/generate-xliff.sh <name of output dir>

The output dir must not already exist
The result will be an archive <name of output dir>.tar.gz, on the same level
with the designated dir output dir. Its structure will mimic the one of locales dir


Generate po from xlf
--------------------
Start with the result of upacking an arhive like the one obtained at the
previous step::

  $ xliff2po locales.xlf.dir locales.po.dir

The result dir will have the structure of the source dir and beable to substitue
the language code dirs found in source Products.Reportek/Products/Reportek/locales


Generate documentation
----------------------
Before generate documentation set variable DOCS_PATH from secret.cfg, to the
path where the program will save the documentation.

To generate documentation::

 $ ./make-docs

To delete all documentation::

 $ ./bin/clean-docs

**Be carefull with clean-docs because it removes the whole content of the folder 
DOCS_PATH.**

========
Contacts
========
The project owner is Søren Roug (soren.roug at eaa.europa.eu)

Other people involved in this project are::
 - Cornel Nițu (cornel.nitu at eaudeweb.ro)
 - Miruna Bădescu (miruna.badescu at eaudeweb.ro)
 - Daniel Mihai Bărăgan (daniel.baragan at eaudeweb.ro)


=========
Resources
=========
Minimum requirements:
 * 2048MB RAM
 * 2 CPU 1.8GHz or faster
 * 4GB hard disk space

Recommended:
 * 4096MB RAM
 * 4 CPU 2.4GHz or faster
 * 8GB hard disk space


=====================
Copyright and license
=====================
Copyright 2007 European Environment Agency (EEA)

Licensed under the EUPL, Version 1.1 or – as soon they will be approved
by the European Commission - subsequent versions of the EUPL (the "Licence");

You may not use this work except in compliance with the Licence.

You may obtain a copy of the Licence at:
https://joinup.ec.europa.eu/software/page/eupl/licence-eupl

Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an "AS IS" basis,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

See the Licence for the specific language governing permissions and limitations under the Licence.

.. _`https://www.softwarecollections.org/en/`: https://www.softwarecollections.org/en/
